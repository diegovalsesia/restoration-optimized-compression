import torch
import torch.nn as nn
import torch.nn.functional as F

from itertools import repeat
import collections.abc
import math

import compressai.ans as ans


def _ntuple(n):
    def parse(x):
        if isinstance(x, collections.abc.Iterable) and not isinstance(x, str):
            return tuple(x)
        return tuple(repeat(x, n))
    return parse

to_2tuple = _ntuple(2)


def _trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor.uniform_(2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.erfinv_()

    # Transform to proper mean, std
    tensor.mul_(std * math.sqrt(2.))
    tensor.add_(mean)

    # Clamp to ensure it's in the proper range
    tensor.clamp_(min=a, max=b)
    return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    NOTE: this impl is similar to the PyTorch trunc_normal_, the bounds [a, b] are
    applied while sampling the normal with mean/std applied, therefore a, b args
    should be adjusted to match the range of mean, std args.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    with torch.no_grad():
        return _trunc_normal_(tensor, mean, std, a, b)


def drop_path(x, drop_prob: float = 0., training: bool = False, scale_by_keep: bool = True):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).

    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.

    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = x.new_empty(shape).bernoulli_(keep_prob)
    if keep_prob > 0.0 and scale_by_keep:
        random_tensor.div_(keep_prob)
    return x * random_tensor


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """
    def __init__(self, drop_prob: float = 0., scale_by_keep: bool = True):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob
        self.scale_by_keep = scale_by_keep

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training, self.scale_by_keep)

    def extra_repr(self):
        return f'drop_prob={round(self.drop_prob,3):0.3f}'


def conv(in_channels, out_channels, kernel_size=5, stride=2):
    return nn.Conv2d(
        in_channels,
        out_channels,
        kernel_size=kernel_size,
        stride=stride,
        padding=kernel_size // 2,
    )


def deconv(in_channels, out_channels, kernel_size=5, stride=2):
    return nn.ConvTranspose2d(
        in_channels,
        out_channels,
        kernel_size=kernel_size,
        stride=stride,
        output_padding=stride - 1,
        padding=kernel_size // 2,
    )


def patch_embed(x):
    x = x.flatten(2).transpose(1, 2)  # B Ph*Pw C
    return x


def patch_unembed(x, x_size):
    B, HW, C = x.shape
    x = x.transpose(1, 2).view(B, -1, x_size[0], x_size[1])
    return x


def window_partition(x, window_size):
    """
    Args:
        x: (B, H, W, C)
        window_size (int): window size
    Returns:
        windows: (num_windows*B, window_size, window_size, C)
    """
    B, H, W, C = x.shape
    x = x.view(B, H // window_size, window_size, W // window_size, window_size, C)
    windows = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(-1, window_size, window_size, C)
    return windows


def window_reverse(windows, window_size, H, W):
    """
    Args:
        windows: (num_windows*B, window_size, window_size, C)
        window_size (int): Window size
        H (int): Height of image
        W (int): Width of image
    Returns:
        x: (B, H, W, C)
    """
    B = int(windows.shape[0] / (H * W / window_size / window_size))
    x = windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)
    x = x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)
    return x



class RSTB_PromptModel(nn.Module):
    """Residual Swin Transformer Block (RSTB).
    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        depth (int): Number of blocks.
        num_heads (int): Number of attention heads.
        window_size (int): Local window size.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0
        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm
    """

    def __init__(self, dim, input_resolution, depth, num_heads, window_size,
                 mlp_ratio=4., qkv_bias=True, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., norm_layer=nn.LayerNorm):
        super(RSTB_PromptModel, self).__init__()

        self.dim = dim
        self.input_resolution = input_resolution
        self.use_prompt=True
        num_tokens = 16

        self.residual_group = BasicLayer_PromptModel(dim=dim,
                                    input_resolution=input_resolution,
                                    depth=depth,
                                    num_heads=num_heads,
                                    window_size=window_size,
                                    mlp_ratio=mlp_ratio,
                                    qkv_bias=qkv_bias, qk_scale=qk_scale,
                                    drop=drop, attn_drop=attn_drop,
                                    drop_path=drop_path,
                                    norm_layer=norm_layer
                                    )


    def forward(self, x, mask, x_size):
        out = patch_embed(x)
        m = [patch_embed(mp) for mp in mask]
        out = self.residual_group(out, m, x_size)
        output = patch_unembed(out, x_size) + x
        return output



class RSTB(nn.Module):
    """Residual Swin Transformer Block (RSTB).
    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        depth (int): Number of blocks.
        num_heads (int): Number of attention heads.
        window_size (int): Local window size.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0
        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm
    """
    def __init__(self, dim, input_resolution, depth, num_heads, window_size,
                 mlp_ratio=4., qkv_bias=True, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., norm_layer=nn.LayerNorm):
        super(RSTB, self).__init__()

        self.dim = dim
        self.input_resolution = input_resolution

        self.residual_group = BasicLayer(dim=dim,
                                            input_resolution=input_resolution,
                                            depth=depth,
                                            num_heads=num_heads,
                                            window_size=window_size,
                                            mlp_ratio=mlp_ratio,
                                            qkv_bias=qkv_bias, qk_scale=qk_scale,
                                            drop=drop, attn_drop=attn_drop,
                                            drop_path=drop_path,
                                            norm_layer=norm_layer)

    def forward(self, x, x_size):
        out = patch_embed(x)
        out = self.residual_group(out, x_size)
        return patch_unembed(out, x_size) + x


class SwinTransformerBlock(nn.Module):
    r""" Swin Transformer Block.
    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resulotion.
        num_heads (int): Number of attention heads.
        window_size (int): Window size.
        shift_size (int): Shift size for SW-MSA.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float, optional): Stochastic depth rate. Default: 0.0
        act_layer (nn.Module, optional): Activation layer. Default: nn.GELU
        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm
    """

    def __init__(self, dim, input_resolution, num_heads, window_size=7, shift_size=0,
                 mlp_ratio=4., qkv_bias=True, qk_scale=None, drop=0., attn_drop=0., drop_path=0.,
                 act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.dim = dim
        self.input_resolution = input_resolution
        self.num_heads = num_heads
        self.window_size = window_size
        self.shift_size = shift_size
        self.mlp_ratio = mlp_ratio
        if min(self.input_resolution) <= self.window_size:
            # if window size is larger than input resolution, we don't partition windows
            self.shift_size = 0
            self.window_size = min(self.input_resolution)
        assert 0 <= self.shift_size < self.window_size, "shift_size must in 0-window_size"

        self.norm1 = norm_layer(dim)
        self.attn = WindowAttention(
            dim, window_size=to_2tuple(self.window_size), num_heads=num_heads,
            qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)

        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

        if self.shift_size > 0:
            attn_mask = self.calculate_mask(self.input_resolution)
        else:
            attn_mask = None

        self.register_buffer("attn_mask", attn_mask)

    def calculate_mask(self, x_size):
        # calculate attention mask for SW-MSA
        H, W = x_size
        img_mask = torch.zeros((1, H, W, 1))  # 1 H W 1
        h_slices = (slice(0, -self.window_size),
                    slice(-self.window_size, -self.shift_size),
                    slice(-self.shift_size, None))
        w_slices = (slice(0, -self.window_size),
                    slice(-self.window_size, -self.shift_size),
                    slice(-self.shift_size, None))
        cnt = 0
        for h in h_slices:
            for w in w_slices:
                img_mask[:, h, w, :] = cnt
                cnt += 1

        mask_windows = window_partition(img_mask, self.window_size)  # nW, window_size, window_size, 1
        mask_windows = mask_windows.view(-1, self.window_size * self.window_size)
        attn_mask = mask_windows.unsqueeze(1) - mask_windows.unsqueeze(2)
        attn_mask = attn_mask.masked_fill(attn_mask != 0, float(-100.0)).masked_fill(attn_mask == 0, float(0.0))

        return attn_mask

    def forward(self, x, x_size):
        H, W = x_size
        B, L, C = x.shape
        # assert L == H * W, "input feature has wrong size"

        shortcut = x
        x = self.norm1(x)
        x = x.view(B, H, W, C)

        # cyclic shift
        if self.shift_size > 0:
            shifted_x = torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))
        else:
            shifted_x = x

        # partition windows
        x_windows = window_partition(shifted_x, self.window_size)  # nW*B, window_size, window_size, C
        x_windows = x_windows.view(-1, self.window_size * self.window_size, C)  # nW*B, window_size*window_size, C

        # W-MSA/SW-MSA (to be compatible for testing on images whose shapes are the multiple of window size
        if self.input_resolution == x_size:
            attn_windows = self.attn(x_windows, mask=self.attn_mask)  # nW*B, window_size*window_size, C
        else:
            attn_windows = self.attn(x_windows, mask=self.calculate_mask(x_size).to(x.device))

        # merge windows
        attn_windows = attn_windows.view(-1, self.window_size, self.window_size, C)
        shifted_x = window_reverse(attn_windows, self.window_size, H, W)  # B H' W' C

        # reverse cyclic shift
        if self.shift_size > 0:
            x = torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))
        else:
            x = shifted_x
        x = x.view(B, H * W, C)

        # FFN
        x = shortcut + self.drop_path(x)
        x = x + self.drop_path(self.mlp(self.norm2(x)))

        return x



class BasicLayer_PromptModel(nn.Module):
    """ A basic Swin Transformer layer for one stage.
    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        depth (int): Number of blocks.
        num_heads (int): Number of attention heads.
        window_size (int): Local window size.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0
        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm
    """

    def __init__(self, dim, input_resolution, depth, num_heads, window_size,
                 mlp_ratio=4., qkv_bias=True, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., norm_layer=nn.LayerNorm):

        super().__init__()
        self.dim = dim
        self.input_resolution = input_resolution
        self.depth = depth

        # build blocks
        self.blocks = nn.ModuleList([
            ModelPromptedSwinTransformerBlock(
                dim=dim, input_resolution=input_resolution,
                num_heads=num_heads, window_size=window_size,
                shift_size=0 if (i % 2 == 0) else window_size // 2,
                mlp_ratio=mlp_ratio,
                qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop, attn_drop=attn_drop,
                drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path,  # noqa
                norm_layer=norm_layer)
            for i in range(depth)])

    def forward(self, x, m, x_size):
        attns = []
        for i, (blk,m_prompt) in enumerate(zip(self.blocks,m)):
            x = blk(x, m_prompt, x_size)
        return x



class BasicLayer(nn.Module):
    """ A basic Swin Transformer layer for one stage.
    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resolution.
        depth (int): Number of blocks.
        num_heads (int): Number of attention heads.
        window_size (int): Local window size.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float | tuple[float], optional): Stochastic depth rate. Default: 0.0
        norm_layer (nn.Module, optional): Normalization layer. Default: nn.LayerNorm
    """

    def __init__(self, dim, input_resolution, depth, num_heads, window_size,
                 mlp_ratio=4., qkv_bias=True, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., norm_layer=nn.LayerNorm,
                 block_module=SwinTransformerBlock):

        super().__init__()
        self.dim = dim
        self.input_resolution = input_resolution
        self.depth = depth

        self.blocks = nn.ModuleList([
            block_module(
                dim=dim, input_resolution=input_resolution,
                num_heads=num_heads, window_size=window_size,
                shift_size=0 if (i % 2 == 0) else window_size // 2,
                mlp_ratio=mlp_ratio,
                qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=drop, attn_drop=attn_drop,
                drop_path=drop_path[i] if isinstance(drop_path, list) else drop_path,  # noqa
                norm_layer=norm_layer)
            for i in range(depth)])
            
    def forward(self, x, x_size):
        attns = []
        for i, blk in enumerate(self.blocks):
            x = blk(x, x_size)
        return x



class ModelPromptedSwinTransformerBlock(SwinTransformerBlock):
    r""" Swin Transformer Block.
    Args:
        dim (int): Number of input channels.
        input_resolution (tuple[int]): Input resulotion.
        num_heads (int): Number of attention heads.
        window_size (int): Window size.
        shift_size (int): Shift size for SW-MSA.
        mlp_ratio (float): Ratio of mlp hidden dim to embedding dim.
        qkv_bias (bool, optional): If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set.
        drop (float, optional): Dropout rate. Default: 0.0
        attn_drop (float, optional): Attention dropout rate. Default: 0.0
        drop_path (float, optional): Stochastic depth rate. Default: 0.0
        act_layer (nn.Module, optional): Activation layer. Default: nn.GELU
        norm_layer (nn.Module, optional): Normalization layer.  Default: nn.LayerNorm
    """

    def __init__(self, dim, input_resolution, num_heads, window_size=7, shift_size=0,
                 mlp_ratio=4., qkv_bias=True, qk_scale=None, drop=0., attn_drop=0., drop_path=0.,
                 act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super(SwinTransformerBlock, self).__init__()
        
        self.dim = dim
        self.input_resolution = input_resolution
        self.num_heads = num_heads
        self.window_size = window_size
        self.shift_size = shift_size
        self.mlp_ratio = mlp_ratio
        self.prompt_location = 'prepend'
        if min(self.input_resolution) <= self.window_size:
            # if window size is larger than input resolution, we don't partition windows
            self.shift_size = 0
            self.window_size = min(self.input_resolution)
        assert 0 <= self.shift_size < self.window_size, "shift_size must in 0-window_size"

        self.norm1 = norm_layer(dim)

        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

        if self.shift_size > 0:
            attn_mask = self.calculate_mask(self.input_resolution, window_size, shift_size)
        else:
            attn_mask = None

        self.register_buffer("attn_mask", attn_mask)

        self.mask_down = 2

        self.num_prompts = (window_size//self.mask_down)**2 
        self.attn = PromptedWindowAttention(
            self.num_prompts, self.prompt_location,
            dim, window_size=to_2tuple(self.window_size),
            num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale,
            attn_drop=attn_drop, proj_drop=drop)

    def calculate_mask(self, x_size, window_size, shift_size):
        # calculate attention mask for SW-MSA
        H, W = x_size
        img_mask = torch.zeros((1, H, W, 1))  # 1 H W 1
        h_slices = (slice(0, -window_size),
                    slice(-window_size, -shift_size),
                    slice(-shift_size, None))
        w_slices = (slice(0, -window_size),
                    slice(-window_size, -shift_size),
                    slice(-shift_size, None))
        cnt = 0
        for h in h_slices:
            for w in w_slices:
                img_mask[:, h, w, :] = cnt
                cnt += 1

        mask_windows = window_partition(img_mask, window_size)  # nW, window_size, window_size, 1
        mask_windows = mask_windows.view(-1, window_size * window_size)
        attn_mask = mask_windows.unsqueeze(1) - mask_windows.unsqueeze(2)
        attn_mask = attn_mask.masked_fill(attn_mask != 0, float(-100.0)).masked_fill(attn_mask == 0, float(0.0))

        return attn_mask

    def forward(self, x, m, x_size):

        H, W = x_size
        B, L, C = x.shape
        # assert L == H * W, "input feature has wrong size"

        shortcut = x
        x = self.norm1(x)

        x = x.view(B, H, W, C)
        m = m.view(B,H//self.mask_down,W//self.mask_down,C)

        # cyclic shift
        if self.shift_size > 0:
            shifted_x = torch.roll(x, shifts=(-self.shift_size, -self.shift_size), dims=(1, 2))
            shifted_m = torch.roll(m, shifts=(-self.shift_size//self.mask_down, -self.shift_size//self.mask_down), dims=(1, 2))
        else:
            shifted_x = x
            shifted_m = m

        # partition windows
        x_windows = window_partition(shifted_x, self.window_size)  # nW*B, window_size, window_size, C
        m_windows = window_partition(shifted_m, self.window_size//self.mask_down)  # nW*B, window_size, window_size, C
        x_windows = x_windows.view(-1, self.window_size * self.window_size, C)  # nW*B, window_size*window_size, C
        m_windows = m_windows.view(-1,(self.window_size//self.mask_down) * (self.window_size//self.mask_down), C)  # nW*B, window_size*window_size, C

        # add back the prompt for attn for parralel-based prompts
        # nW*B, num_prompts + window_size*window_size, C
        num_windows = int(x_windows.shape[0] / B)
        x_windows = torch.cat((m_windows, x_windows), dim=1)
        

        mask_a = self.calculate_mask(x_size, self.window_size, self.shift_size)
        mask_b = torch.nn.functional.interpolate(mask_a[:,:,(self.window_size//self.mask_down)**2:self.window_size**2-(self.window_size//self.mask_down)**2].unsqueeze(1),(self.window_size**2,(self.window_size//self.mask_down)**2)).squeeze(1)
        if self.mask_down>1:
            prompt_mask = torch.cat([mask_a,mask_b],2)
        else:
            prompt_mask = torch.cat([mask_a,mask_a],2)


        # W-MSA/SW-MSA (to be compatible for testing on images whose shapes are the multiple of window size
        if self.input_resolution == x_size:
            attn_windows = self.attn(x_windows, mask=prompt_mask.to(x.device))  # nW*B, window_size*window_size, C
        else:
            attn_windows = self.attn(x_windows, mask=prompt_mask.to(x.device))

        # merge windows
        attn_windows = attn_windows.view(-1, self.window_size, self.window_size, C)
        shifted_x = window_reverse(attn_windows, self.window_size, H, W)  # B H' W' C

        # reverse cyclic shift
        if self.shift_size > 0:
            x = torch.roll(shifted_x, shifts=(self.shift_size, self.shift_size), dims=(1, 2))
        else:
            x = shifted_x
        x = x.view(B, H * W, C)

        # FFN
        x = shortcut + self.drop_path(x)
        x = x + self.drop_path(self.mlp(self.norm2(x)))

        return x





class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x



class WindowAttention(nn.Module):
    r""" Window based multi-head self attention (W-MSA) module with relative position bias.
    It supports both of shifted and non-shifted window.
    Args:
        dim (int): Number of input channels.
        window_size (tuple[int]): The height and width of the window.
        num_heads (int): Number of attention heads.
        qkv_bias (bool, optional):  If True, add a learnable bias to query, key, value. Default: True
        qk_scale (float | None, optional): Override default qk scale of head_dim ** -0.5 if set
        attn_drop (float, optional): Dropout ratio of attention weight. Default: 0.0
        proj_drop (float, optional): Dropout ratio of output. Default: 0.0
    """

    def __init__(self, dim, window_size, num_heads, qkv_bias=True, qk_scale=None, attn_drop=0., proj_drop=0.):

        super().__init__()
        self.dim = dim
        self.window_size = window_size  # Wh, Ww
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim ** -0.5

        # define a parameter table of relative position bias
        self.relative_position_bias_table = nn.Parameter(
            torch.zeros((2 * window_size[0] - 1) * (2 * window_size[1] - 1), num_heads))  # 2*Wh-1 * 2*Ww-1, nH

        # get pair-wise relative position index for each token inside the window
        coords_h = torch.arange(self.window_size[0])
        coords_w = torch.arange(self.window_size[1])
        coords = torch.stack(torch.meshgrid([coords_h, coords_w]))  # 2, Wh, Ww
        coords_flatten = torch.flatten(coords, 1)  # 2, Wh*Ww
        relative_coords = coords_flatten[:, :, None] - coords_flatten[:, None, :]  # 2, Wh*Ww, Wh*Ww
        relative_coords = relative_coords.permute(1, 2, 0).contiguous()  # Wh*Ww, Wh*Ww, 2
        relative_coords[:, :, 0] += self.window_size[0] - 1  # shift to start from 0
        relative_coords[:, :, 1] += self.window_size[1] - 1
        relative_coords[:, :, 0] *= 2 * self.window_size[1] - 1
        relative_position_index = relative_coords.sum(-1)  # Wh*Ww, Wh*Ww
        self.register_buffer("relative_position_index", relative_position_index)

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)

        self.proj_drop = nn.Dropout(proj_drop)

        trunc_normal_(self.relative_position_bias_table, std=.02)
        self.softmax = nn.Softmax(dim=-1)

    def forward(self, x, mask=None):
        """
        Args:
            x: input features with shape of (num_windows*B, N, C)
            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None
        """
        B_, N, C = x.shape
        qkv = self.qkv(x).reshape(B_, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]  # make torchscript happy (cannot use tensor as tuple)

        q = q * self.scale
        attn = (q @ k.transpose(-2, -1))

        relative_position_bias = self.relative_position_bias_table[self.relative_position_index.view(-1)].view(
            self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)  # Wh*Ww,Wh*Ww,nH
        relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww

        attn = attn + relative_position_bias.unsqueeze(0)

        if mask is not None:
            nW = mask.shape[0]
            attn = attn.view(B_ // nW, nW, self.num_heads, N, N) + mask.unsqueeze(1).unsqueeze(0)
            attn = attn.view(-1, self.num_heads, N, N)
            attn = self.softmax(attn)
        else:
            attn = self.softmax(attn)

        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B_, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x



class PromptedWindowAttention(WindowAttention):
    def __init__(
        self, num_prompts, prompt_location, dim, window_size, num_heads,
        qkv_bias=True, qk_scale=None, attn_drop=0., proj_drop=0.
    ):
        super(PromptedWindowAttention, self).__init__(
            dim, window_size, num_heads, qkv_bias, qk_scale,
            attn_drop, proj_drop)
        self.num_prompts = num_prompts
        self.prompt_location = prompt_location

    def forward(self, x, mask=None):
        """
        Args:
            x: input features with shape of (num_windows*B, N, C)
            mask: (0/-inf) mask with shape of (num_windows, Wh*Ww, Wh*Ww) or None
        """
        #out_vis = {}
        B_, N, C = x.shape
        fin_N = N - self.num_prompts
        qkv = self.qkv(x).reshape(B_, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0][:,:,self.num_prompts:], qkv[1], qkv[2]  # make torchscript happy (cannot use tensor as tuple)
        # out_vis['v'] = v.detach()

        q = q * self.scale
        attn = (q @ k.transpose(-2, -1))
        # out_vis['inner_prod'] = attn.detach()

        relative_position_bias = self.relative_position_bias_table[self.relative_position_index.view(-1)].view(
            self.window_size[0] * self.window_size[1], self.window_size[0] * self.window_size[1], -1)  # Wh*Ww,Wh*Ww,nH
        relative_position_bias = relative_position_bias.permute(2, 0, 1).contiguous()  # nH, Wh*Ww, Wh*Ww

        # account for prompt nums for relative_position_bias
        # attn: [1920, 6, 649, 649]
        # relative_position_bias: [6, 49, 49])

        if self.prompt_location == "prepend":
            # expand relative_position_bias
            _C, _H, _W = relative_position_bias.shape

            relative_position_bias = torch.cat((
                torch.zeros(_C, _H , self.num_prompts, device=attn.device),
                relative_position_bias
                ), dim=-1)
        
        # out_vis['rpb'] = relative_position_bias.unsqueeze(0).detach()

        attn = attn + relative_position_bias.unsqueeze(0)
        #out_vis['attn_beforesm'] = attn.detach()

        if mask is not None:
            # incorporate prompt
            # mask: (nW, 49, 49) --> (nW, 49 + n_prompts, 49 + n_prompts)
            nW, _H, _W = mask.shape
            zero_padd = N-mask.shape[-1]
            if self.prompt_location == "prepend" and mask.shape[-1]!=N:
                # expand relative_position_bias
                mask = torch.cat((
                    torch.zeros(
                        nW, _H, zero_padd,
                        device=attn.device),
                    mask), dim=-1)
            # logger.info("before", attn.shape)
            attn = attn.view(B_ // nW, nW, self.num_heads, fin_N, N) + mask.unsqueeze(1).unsqueeze(0)
            # logger.info("after", attn.shape)
            attn = attn.view(-1, self.num_heads, fin_N, N)
            attn = self.softmax(attn)
        else:
            attn = self.softmax(attn)
        
        #out_vis['attn'] = attn.detach()

        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B_, fin_N, C)
        # out_vis['x'] = x.detach()
        x = self.proj(x)
        # out_vis['x_proj'] = x.detach()
        x = self.proj_drop(x)
        #return x, out_vis
        return x



# input: z from net output
# outputs:  symbols, indexes, self.quantized_cdf, self.cdf_length, self.offset to RANS encoder
#           z_hat to net
class Phase1AModule(torch.nn.Module):

    def __init__(self, quantiles, quantized_cdf, cdf_length, offset):
        super(Phase1AModule, self).__init__()
        self.quantiles = quantiles
        self.quantized_cdf = quantized_cdf
        self.cdf_length = cdf_length
        self.offset = offset

    def build_indexes(self, size):
        dims = len(size)
        N = size[0]
        C = size[1]
        view_dims = [1]*dims
        view_dims[1] = -1
        indexes = torch.arange(C).view(*view_dims)
        indexes = indexes.int()
        return indexes.repeat(N, 1, *size[2:])

    def extend_ndims(self, tensor, n):
        return tensor.reshape(-1, *([1] * n)) if n > 0 else tensor.reshape(-1)   

    def forward(self, z):
        
        indexes = self.build_indexes(z.size())
        medians = self.quantiles[:, :, 1:2]
        spatial_dims = len(z.size()) - 2
        medians = self.extend_ndims(medians, spatial_dims)
        medians = medians.expand(z.size(0), *([-1] * (spatial_dims + 1)))
        # quantization
        outputs = z - medians
        outputs = torch.round(outputs)
        symbols = outputs.int()
        # dequantization
        z_hat = outputs + medians

        return symbols, indexes, self.quantized_cdf, self.cdf_length, self.offset, z_hat




# input: y, gaussian_params from net outputs
# outputs: symbols, indexes, self.gc_quantized_cdf, self.gc_cdf_length, self.gc_offset to RANS encoder
class Phase2Module(torch.nn.Module):

    def __init__(self, scale_table, gc_quantized_cdf, gc_cdf_length, gc_offset):
        super(Phase2Module, self).__init__()
        self.scale_table = scale_table
        self.gc_quantized_cdf = gc_quantized_cdf
        self.gc_cdf_length = gc_cdf_length
        self.gc_offset = gc_offset


    def build_indexes_gaussian_conditional(self, scales, scale_table):
        scales = torch.max(scales, torch.Tensor([0.11])) # 0.11 is scale_bound, to be checked
        indexes = scales.new_full(scales.size(), len(scale_table) - 1).int()
        for s in scale_table[:-1]:
            indexes -= (scales <= s).int()
        return indexes


    def forward(self, y, gaussian_params):
        scales_hat, means_hat = gaussian_params.chunk(2, 1)
        indexes = self.build_indexes_gaussian_conditional(scales_hat, self.scale_table)
        # quantization
        outputs = y - means_hat
        outputs = torch.round(outputs)
        symbols = outputs.int()       
        return symbols, indexes, means_hat, self.gc_quantized_cdf, self.gc_cdf_length, self.gc_offset



####################################################

class LidarGuidedCompressor(nn.Module):
    def __init__(self, eb_quantiles, eb_quantized_cdf, eb_cdf_length, eb_offset, scale_table, gc_quantized_cdf, gc_cdf_length, gc_offset, N=128, M=192, input_resolution=(256,256)):
        super(LidarGuidedCompressor, self).__init__()

        depths = [2, 4, 6, 2, 2, 2]
        num_heads = [8, 8, 8, 16, 16, 16]
        window_size = 8
        mlp_ratio = 2.
        qkv_bias = True
        qk_scale = None
        drop_rate = 0.
        attn_drop_rate = 0.
        drop_path_rate = 0.1
        norm_layer = nn.LayerNorm

        self.eb_quantiles = eb_quantiles
        self.eb_quantized_cdf = eb_quantized_cdf
        self.eb_cdf_length = eb_cdf_length
        self.eb_offset = eb_offset

        self.scale_table = scale_table
        self.gc_quantized_cdf = gc_quantized_cdf
        self.gc_cdf_length = gc_cdf_length
        self.gc_offset = gc_offset


        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, sum(depths))] 

        self.g_a0 = conv(3, N, kernel_size=5, stride=2)
        self.g_a0_prompt = conv(4, N, kernel_size=5, stride=2)
        self.g_a0_prompt_layers = nn.ModuleList([conv(N, N, kernel_size=3, stride=2) for _ in range(depths[0])])

        self.g_a1 = RSTB_PromptModel(dim=N,
                        input_resolution=(input_resolution[0]//2, input_resolution[1]//2),
                        depth=depths[0],
                        num_heads=num_heads[0],
                        window_size=window_size,
                        mlp_ratio=mlp_ratio,
                        qkv_bias=qkv_bias, qk_scale=qk_scale,
                        drop=drop_rate, attn_drop=attn_drop_rate,
                        drop_path=dpr[sum(depths[:0]):sum(depths[:1])],
                        norm_layer=norm_layer)

        self.g_a2 = conv(N, N, kernel_size=3, stride=2)
        self.g_a2_prompt = conv(N, N, kernel_size=3, stride=2)
        self.g_a2_prompt_layers = nn.ModuleList([conv(N, N, kernel_size=3, stride=2) for _ in range(depths[1])])

        self.g_a3 = RSTB_PromptModel(dim=N,
                        input_resolution=(input_resolution[0]//4, input_resolution[1]//4),
                        depth=depths[1],
                        num_heads=num_heads[1],
                        window_size=window_size,
                        mlp_ratio=mlp_ratio,
                        qkv_bias=qkv_bias, qk_scale=qk_scale,
                        drop=drop_rate, attn_drop=attn_drop_rate,
                        drop_path=dpr[sum(depths[:1]):sum(depths[:2])],
                        norm_layer=norm_layer)     

        self.g_a4 = conv(N, N, kernel_size=3, stride=2)
        self.g_a4_prompt = conv(N, N, kernel_size=3, stride=2)
        self.g_a4_prompt_layers = nn.ModuleList([conv(N, N, kernel_size=3, stride=2) for _ in range(depths[2])])

        self.g_a5 = RSTB_PromptModel(dim=N,
                        input_resolution=(input_resolution[0]//8, input_resolution[1]//8),
                        depth=depths[2],
                        num_heads=num_heads[2],
                        window_size=window_size,
                        mlp_ratio=mlp_ratio,
                        qkv_bias=qkv_bias, qk_scale=qk_scale,
                        drop=drop_rate, attn_drop=attn_drop_rate,
                        drop_path=dpr[sum(depths[:2]):sum(depths[:3])],
                        norm_layer=norm_layer)

        self.g_a6 = conv(N, M, kernel_size=3, stride=2)
        self.g_a6_prompt = conv(N, M, kernel_size=3, stride=2)
        self.g_a6_prompt_layers = nn.ModuleList([conv(M, M, kernel_size=3, stride=2) for _ in range(depths[3])])

        self.g_alidar0_prompt = conv(1, N, kernel_size=5, stride=2)
        self.g_alidar2_prompt = conv(N, N, kernel_size=3, stride=2)
        self.g_alidar4_prompt = conv(N, N, kernel_size=3, stride=2)
        self.g_alidar6_prompt = conv(N, M, kernel_size=3, stride=2)
        
        self.g_a7 = RSTB_PromptModel(dim=M,
                        input_resolution=(input_resolution[0]//16, input_resolution[1]//16),
                        depth=depths[3],
                        num_heads=num_heads[3],
                        window_size=window_size,
                        mlp_ratio=mlp_ratio,
                        qkv_bias=qkv_bias, qk_scale=qk_scale,
                        drop=drop_rate, attn_drop=attn_drop_rate,
                        drop_path=dpr[sum(depths[:3]):sum(depths[:4])],
                        norm_layer=norm_layer)

        self.h_a0 = conv(M, N, kernel_size=3, stride=2)

        self.h_a1 = RSTB(dim=N,
                         input_resolution=(input_resolution[0]//32, input_resolution[1]//32),
                         depth=depths[4],
                         num_heads=num_heads[4],
                         window_size=window_size//2,
                         mlp_ratio=mlp_ratio,
                         qkv_bias=qkv_bias, qk_scale=qk_scale,
                         drop=drop_rate, attn_drop=attn_drop_rate,
                         drop_path=dpr[sum(depths[:4]):sum(depths[:5])],
                         norm_layer=norm_layer)
        
        self.h_a2 = conv(N, N, kernel_size=3, stride=2)
        self.h_a3 = RSTB(dim=N,
                         input_resolution=(input_resolution[0]//64, input_resolution[1]//64),
                         depth=depths[5],
                         num_heads=num_heads[5],
                         window_size=window_size//2,
                         mlp_ratio=mlp_ratio,
                         qkv_bias=qkv_bias, qk_scale=qk_scale,
                         drop=drop_rate, attn_drop=attn_drop_rate,
                         drop_path=dpr[sum(depths[:5]):sum(depths[:6])],
                         norm_layer=norm_layer)

        depths = depths[::-1]
        num_heads = num_heads[::-1]

        self.h_s0 = RSTB(dim=N,
                         input_resolution=(input_resolution[0]//64, input_resolution[1]//64),
                         depth=depths[0],
                         num_heads=num_heads[0],
                         window_size=window_size//2,
                         mlp_ratio=mlp_ratio,
                         qkv_bias=qkv_bias, qk_scale=qk_scale,
                         drop=drop_rate, attn_drop=attn_drop_rate,
                         drop_path=dpr[sum(depths[:0]):sum(depths[:1])],
                         norm_layer=norm_layer)

        self.h_s1 = deconv(N, N, kernel_size=3, stride=2)

        self.h_s2 = RSTB(dim=N,
                         input_resolution=(input_resolution[0]//32, input_resolution[1]//32),
                         depth=depths[1],
                         num_heads=num_heads[1],
                         window_size=window_size//2,
                         mlp_ratio=mlp_ratio,
                         qkv_bias=qkv_bias, qk_scale=qk_scale,
                         drop=drop_rate, attn_drop=attn_drop_rate,
                         drop_path=dpr[sum(depths[:1]):sum(depths[:2])],
                         norm_layer=norm_layer)

        self.h_s3 = deconv(N, M*2, kernel_size=3, stride=2)
        
        self.g_s0 = RSTB_PromptModel(dim=M,
                        input_resolution=(input_resolution[0]//16, input_resolution[1]//16),
                        depth=depths[2],
                        num_heads=num_heads[2],
                        window_size=window_size,
                        mlp_ratio=mlp_ratio,
                        qkv_bias=qkv_bias, qk_scale=qk_scale,
                        drop=drop_rate, attn_drop=attn_drop_rate,
                        drop_path=dpr[sum(depths[:2]):sum(depths[:3])],
                        norm_layer=norm_layer)

        self.g_s1 = deconv(M, N, kernel_size=3, stride=2)

        self.g_s2 = RSTB_PromptModel(dim=N,
                        input_resolution=(input_resolution[0]//8, input_resolution[1]//8),
                        depth=depths[3],
                        num_heads=num_heads[3],
                        window_size=window_size,
                        mlp_ratio=mlp_ratio,
                        qkv_bias=qkv_bias, qk_scale=qk_scale,
                        drop=drop_rate, attn_drop=attn_drop_rate,
                        drop_path=dpr[sum(depths[:3]):sum(depths[:4])],
                        norm_layer=norm_layer)

        self.g_s3 = deconv(N, N, kernel_size=3, stride=2)

        self.g_s4 = RSTB_PromptModel(dim=N,
                        input_resolution=(input_resolution[0]//4, input_resolution[1]//4),
                        depth=depths[4],
                        num_heads=num_heads[4],
                        window_size=window_size,
                        mlp_ratio=mlp_ratio,
                        qkv_bias=qkv_bias, qk_scale=qk_scale,
                        drop=drop_rate, attn_drop=attn_drop_rate,
                        drop_path=dpr[sum(depths[:4]):sum(depths[:5])],
                        norm_layer=norm_layer)

        self.g_s5 = deconv(N, N, kernel_size=3, stride=2)

        self.g_s6 = RSTB_PromptModel(dim=N,
                        input_resolution=(input_resolution[0]//2, input_resolution[1]//2),
                        depth=depths[5],
                        num_heads=num_heads[5],
                        window_size=window_size,
                        mlp_ratio=mlp_ratio,
                        qkv_bias=qkv_bias, qk_scale=qk_scale,
                        drop=drop_rate, attn_drop=attn_drop_rate,
                        drop_path=dpr[sum(depths[:5]):sum(depths[:6])],
                        norm_layer=norm_layer)

        self.g_s7 = deconv(N, 3, kernel_size=5, stride=2)

        self.g_s0_prompt = conv(M+1, M, kernel_size=3, stride=1)
        self.g_s0_prompt_layers = nn.ModuleList([conv(M, M, kernel_size=3, stride=2) for _ in range(depths[2])])
        self.g_s2_prompt = deconv(M, N, kernel_size=3, stride=2)
        self.g_s2_prompt_layers = nn.ModuleList([conv(N, N, kernel_size=3, stride=2) for _ in range(depths[3])])
        self.g_s4_prompt = deconv(N, N, kernel_size=3, stride=2)
        self.g_s4_prompt_layers = nn.ModuleList([conv(N, N, kernel_size=3, stride=2) for _ in range(depths[4])])
        self.g_s6_prompt = deconv(N, N, kernel_size=3, stride=2)
        self.g_s6_prompt_layers = nn.ModuleList([conv(N, N, kernel_size=3, stride=2) for _ in range(depths[5])])

        self.g_slidar0_prompt = conv(1, N, kernel_size=5, stride=2)
        self.g_slidar2_prompt = conv(N, N, kernel_size=3, stride=2)
        self.g_slidar4_prompt = conv(N, N, kernel_size=3, stride=2)
        self.g_slidar6_prompt = conv(N, M, kernel_size=3, stride=2)


        self.phase1a_module = Phase1AModule(eb_quantiles, eb_quantized_cdf, eb_cdf_length, eb_offset)
        self.phase2_module = Phase2Module(scale_table, gc_quantized_cdf, gc_cdf_length, gc_offset)


    def g_a_lidar(self, x, mask, x_size=None, lidar=None):

        if x_size is None:
            x_size = x.shape[2:4]
        mask = torch.concat([mask, x], 1)
        x = self.g_a0(x)
        m = self.g_a0_prompt(mask)
        
        # Generate lidar representation to match sematic levels and resolutions
        m_lidar0 = self.g_alidar0_prompt(lidar)
        m_lidar2 = self.g_alidar2_prompt(m_lidar0)
        m_lidar4 = self.g_alidar4_prompt(m_lidar2)
        m_lidar6 = self.g_alidar6_prompt(m_lidar4)
        
        m = torch.add(m, m_lidar0)
        
        m_layers = [prompt_layer(m) for prompt_layer in self.g_a0_prompt_layers]
        x = self.g_a1(x, m_layers, (x_size[0]//2, x_size[1]//2))

        
        x = self.g_a2(x)
        m = self.g_a2_prompt(m)
        m = torch.add(m, m_lidar2)
        
        m_layers = [prompt_layer(m) for prompt_layer in self.g_a2_prompt_layers]
        x = self.g_a3(x, m_layers, (x_size[0]//4, x_size[1]//4))

        
        x = self.g_a4(x)
        m = self.g_a4_prompt(m)
        m = torch.add(m, m_lidar4)
        
        m_layers = [prompt_layer(m) for prompt_layer in self.g_a4_prompt_layers]
        x = self.g_a5(x, m_layers, (x_size[0]//8, x_size[1]//8))

        
        x = self.g_a6(x)
        m = self.g_a6_prompt(m)
        m = torch.add(m, m_lidar6)
        
        m_layers = [prompt_layer(m) for prompt_layer in self.g_a6_prompt_layers]
        x = self.g_a7(x, m_layers, (x_size[0]//16, x_size[1]//16))

        return x
    

    def g_s_lidar(self, x, x_size=None, lamda_values=None, lidar=None):

        if x_size is None:
            x_size = (x.shape[2]*16, x.shape[3]*16)
            
        # Concatenate the 'lamda_values' tensor with 'x' (image) along the second dimension to generate
        # the lambda prompt
        prompt = torch.concat([lamda_values, x],1)
        m = self.g_s0_prompt(prompt)
        # Generate lidar representation in a reversed fashon to match sematic levels and resolutions
        m_lidar6 = self.g_slidar0_prompt(lidar)
        m_lidar4 = self.g_slidar2_prompt(m_lidar6)
        m_lidar2 = self.g_slidar4_prompt(m_lidar4)
        m_lidar0 = self.g_slidar6_prompt(m_lidar2)
        
        # add the infomation from the lambda promt and from the lidar prompt
        # Note: the addition preserve the channel
        m = torch.add(m, m_lidar0)
        m_layers = [prompt_layer(m) for prompt_layer in self.g_s0_prompt_layers]
        x = self.g_s0(x, m_layers, (x_size[0]//16, x_size[1]//16))
        
        x = self.g_s1(x)
        m = self.g_s2_prompt(m)
        m = torch.add(m, m_lidar2)
        m_layers = [prompt_layer(m) for prompt_layer in self.g_s2_prompt_layers]
        x = self.g_s2(x, m_layers, (x_size[0]//8, x_size[1]//8))
        
        x = self.g_s3(x)
        m = self.g_s4_prompt(m)
        m = torch.add(m, m_lidar4)
        m_layers = [prompt_layer(m) for prompt_layer in self.g_s4_prompt_layers]
        x = self.g_s4(x, m_layers, (x_size[0]//4, x_size[1]//4))
        
        x = self.g_s5(x)
        m = self.g_s6_prompt(m)
        m = torch.add(m, m_lidar6)
        m_layers = [prompt_layer(m) for prompt_layer in self.g_s6_prompt_layers]
        x = self.g_s6(x, m_layers, (x_size[0]//2, x_size[1]//2))

        x = self.g_s7(x)

        return x
        
    
    def h_a(self, x, x_size=None):
        if x_size is None:
            x_size = (x.shape[2]*16, x.shape[3]*16)
        x = self.h_a0(x)
        x = self.h_a1(x, (x_size[0]//32, x_size[1]//32))
        x = self.h_a2(x)
        x = self.h_a3(x, (x_size[0]//64, x_size[1]//64))
        return x
    

    def h_s(self, x, x_size=None):
        if x_size is None:
            x_size = (x.shape[2]*64, x.shape[3]*64)
        x = self.h_s0(x, (x_size[0]//64, x_size[1]//64))
        x = self.h_s1(x)
        x = self.h_s2(x, (x_size[0]//32, x_size[1]//32))
        x = self.h_s3(x)
        return x
    




    def forward(self, x, lamb, lidar):

        x_size = (x.shape[2], x.shape[3])
        y = self.g_a_lidar(x, lamb, x_size, lidar=lidar)
        z = self.h_a(y, x_size)

        z_symbols, z_indexes, eb_quantized_cdf, eb_cdf_length, eb_offset, z_hat = self.phase1a_module(z)

        gaussian_params = self.h_s(z_hat, x_size)

        y_symbols, y_indexes, means_hat, gc_quantized_cdf, gc_cdf_length, gc_offset = self.phase2_module(y, gaussian_params)

        return z_symbols, z_indexes, eb_quantized_cdf, eb_cdf_length, eb_offset, y_symbols, y_indexes, means_hat, gc_quantized_cdf, gc_cdf_length, gc_offset


    # strings = [y_strings, z_strings]
    def decompress(self, strings, shape, lambda_decoder, lidar):
        
        assert isinstance(strings, list) and len(strings) == 2
        
        z_hat = self.eb_decompress(strings[1], shape)
        
        gaussian_params = self.h_s(z_hat) 
        
        scales_hat, means_hat = gaussian_params.chunk(2, 1)
        
        indexes = self.gc_build_indexes(scales_hat)
        
        y_hat = self.gc_decompress(strings[0], indexes, means=means_hat)

        x_hat = self.g_s_lidar(y_hat, [256,256], lambda_decoder, lidar).clamp_(0, 1)
        
        return x_hat
    

    def extend_ndims(self, tensor, n):
        return tensor.reshape(-1, *([1] * n)) if n > 0 else tensor.reshape(-1)   
  

    def dec_eb_build_indexes(self, size):
        dims = len(size)
        N = size[0]
        C = size[1]
        view_dims = [1]*dims
        view_dims[1] = -1
        indexes = torch.arange(C).view(*view_dims)
        indexes = indexes.int()
        return indexes.repeat(N, 1, *size[2:])


    def eb_decompress(self, strings, size):
        output_size = (len(strings), self.eb_quantized_cdf.size(0), *size)
        indexes = self.dec_eb_build_indexes(output_size)
        medians = self.eb_quantiles[:, :, 1:2]
        medians = self.extend_ndims(medians, len(size))
        medians = medians.expand(len(strings), *([-1] * (len(size) + 1)))
        return self.gc_decompress2(strings, indexes, medians.dtype, medians)
    

    def gc_decompress2(self, strings, indexes, dtype, means):

        cdf = self.eb_quantized_cdf
        outputs = cdf.new_empty(indexes.size())

        for i, s in enumerate(strings):
            values = ans.RansDecoder().decode_with_indexes(
                s,
                indexes[i].reshape(-1).int().tolist(),
                cdf.tolist(),
                self.eb_cdf_length.reshape(-1).int().tolist(),
                self.eb_offset.reshape(-1).int().tolist(),
            )
            outputs[i] = torch.tensor(
                values, device=outputs.device, dtype=outputs.dtype
            ).reshape(outputs[i].size())
        outputs = outputs + means
        return outputs


    def gc_build_indexes(self, scales):
        scales = torch.max(scales, torch.Tensor([0.11])) # 0.11 is scale_bound, to be checked
        indexes = scales.new_full(scales.size(), len(self.scale_table) - 1).int()
        for s in self.scale_table[:-1]:
            indexes -= (scales <= s).int()
        return indexes
    

    def gc_decompress(self, strings, indexes, dtype=torch.float, means=None):

        cdf = self.gc_quantized_cdf
        outputs = cdf.new_empty(indexes.size())

        for i, s in enumerate(strings):
            values = ans.RansDecoder().decode_with_indexes(
                s,
                indexes[i].reshape(-1).int().tolist(),
                cdf.tolist(),
                self.gc_cdf_length.reshape(-1).int().tolist(),
                self.gc_offset.reshape(-1).int().tolist(),
            )
            outputs[i] = torch.tensor(
                values, device=outputs.device, dtype=outputs.dtype
            ).reshape(outputs[i].size())
        outputs = outputs + means
        return outputs